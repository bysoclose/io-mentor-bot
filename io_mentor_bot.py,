import sys
import asyncio
from dotenv import load_dotenv
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QTextEdit, QCalendarWidget
from PyQt5.QtGui import QPixmap, QPalette, QBrush
from PyQt5.QtCore import Qt
from iointel import Agent, Workflow
import nest_asyncio
from datetime import datetime

nest_asyncio.apply()

load_dotenv()
api_key = os.environ["OPENAI_API_KEY"]

agent = Agent(
    name="Super Agent",
    instructions="You are an assistant specialized in doing anything.",
    model="meta-llama/Llama-3.3-70B-Instruct",
    api_key=api_key,
    base_url="https://api.intelligence.io.solutions/api/v1"
)

async def run_workflow(user_input):
    workflow = Workflow(objective=user_input, client_mode=False)
    result = await workflow.custom(
        name="custom-task",
        objective="continue summarizing",
        instructions="Focus on previous history",
        agents=[agent]
    ).run_tasks()
    return result["results"]["custom-task"]

def copy_to_clipboard(text):
    app.clipboard().setText(text)
    print(f"'{text}' panoya kopyalandı!")

def on_click_copy(text):
    copy_to_clipboard(text)

class IOAssistant(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("IO.NET Assistant")
        self.setGeometry(100, 100, 800, 900)

        # Arka plan resmi
        palette = QPalette()
        pixmap = QPixmap("background.jpg").scaled(800, 900)
        palette.setBrush(QPalette.Background, QBrush(pixmap))
        self.setPalette(palette)

        # Ana widget ve layout
        main_widget = QWidget(self)
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout(main_widget)

        # Logo
        try:
            logo_label = QLabel(self)
            pixmap_logo = QPixmap("io_logo.png").scaled(150, 50)
            logo_label.setPixmap(pixmap_logo)
            layout.addWidget(logo_label, alignment=Qt.AlignCenter)
        except Exception:
            logo_label = QLabel("IO.NET Assistant", self)
            logo_label.setStyleSheet("font-size: 24px; font-weight: bold; color: white;")
            layout.addWidget(logo_label, alignment=Qt.AlignCenter)

        # Tarih ve saat
        self.datetime_label = QLabel("", self)
        self.datetime_label.setStyleSheet("font-size: 14px; color: white;")
        self.datetime_label.move(650, 20)
        self.update_datetime()

        # Giriş alanı
        input_widget = QWidget(self)
        input_layout = QHBoxLayout(input_widget)
        self.input_entry = QLineEdit(self)
        self.input_entry.setPlaceholderText("Sorunuzu yazın...")
        self.input_entry.setStyleSheet("background-color: rgba(0, 0, 0, 0); color: white; border: 1px solid white; padding: 5px;")
        submit_btn = QPushButton("Gönder", self)
        submit_btn.setStyleSheet("background-color: #162447; color: white; padding: 5px;")
        submit_btn.clicked.connect(self.on_submit)
        input_layout.addWidget(self.input_entry)
        input_layout.addWidget(submit_btn)
        layout.addWidget(input_widget, alignment=Qt.AlignCenter)

        # Yükleme etiketi
        self.loading_label = QLabel("", self)
        self.loading_label.setStyleSheet("font-size: 16px; color: orange; qproperty-alignment: AlignCenter;")
        layout.addWidget(self.loading_label)

        # Sohbet alanı
        self.chat_textbox = QTextEdit(self)
        self.chat_textbox.setReadOnly(True)
        self.chat_textbox.setStyleSheet("background-color: rgba(0, 0, 0, 0); color: white; border: 1px solid white;")
        layout.addWidget(self.chat_textbox)

        # Çıkış alanı
        self.output_textbox = QTextEdit(self)
        self.output_textbox.setReadOnly(True)
        self.output_textbox.setStyleSheet("background-color: rgba(0, 0, 0, 0); color: white; border: 1px solid white;")
        layout.addWidget(self.output_textbox)

        # Temizle butonu
        clear_btn = QPushButton("Sohbeti Temizle", self)
        clear_btn.setStyleSheet("background-color: #162447; color: white; padding: 5px;")
        clear_btn.clicked.connect(self.clear_chat_history)
        layout.addWidget(clear_btn, alignment=Qt.AlignCenter)

        # Takvim butonu
        calendar_btn = QPushButton("Takvim Aç", self)
        calendar_btn.setStyleSheet("background-color: #162447; color: white; padding: 5px;")
        calendar_btn.clicked.connect(self.show_calendar)
        layout.addWidget(calendar_btn, alignment=Qt.AlignCenter)

        # Hava durumu
        weather_label = QLabel("Hava Durumu: 25°C, Güneşli", self)
        weather_label.setStyleSheet("font-size: 14px; color: white;")
        layout.addWidget(weather_label, alignment=Qt.AlignCenter)

        # Bağlantılar
        links_widget = QWidget(self)
        links_layout = QVBoxLayout(links_widget)
        link_label = QLabel("Bağlantılar (Tıklayın):", self)
        link_label.setStyleSheet("font-size: 14px; font-weight: bold; color: white;")
        links_layout.addWidget(link_label)
        self.link_texts = []
        links = [
            "https://github.com/bysoclose/io-mentor-bot",
            "https://discord.gg/cXN3WghNhG",
            "https://twitter.com/bilal_ibanoglu"
        ]
        for link in links:
            link_text = QLabel(link, self)
            link_text.setStyleSheet("color: cyan; text-decoration: underline;")
            link_text.mousePressEvent = lambda e, t=link: on_click_copy(t)
            links_layout.addWidget(link_text)
        layout.addWidget(links_widget)

        self.show()

    def update_datetime(self):
        now = datetime.now()
        self.datetime_label.setText(now.strftime("%Y-%m-%d %H:%M:%S"))
        self.datetime_label.adjustSize()
        self.startTimer(1000, self.update_datetime)

    async def process_user_input(self):
        global loading_start_time
        loading_start_time = datetime.now()
        self.loading_label.setText("⏳ Yükleniyor... 0s")
        submit_btn.setEnabled(False)

        try:
            result = await run_workflow(self.input_entry.text().strip())
        except Exception as e:
            result = f"Hata: {str(e)}"

        self.output_textbox.setText(result)
        self.chat_textbox.append(f"Sen: {self.input_entry.text().strip()}\nAsistan: {result}\n")
        self.input_entry.clear()
        self.loading_label.setText("")
        submit_btn.setEnabled(True)

    def on_submit(self):
        if not self.input_entry.text().strip():
            return
        asyncio.create_task(self.process_user_input())

    def clear_chat_history(self):
        self.chat_textbox.clear()
        self.output_textbox.clear()

    def show_calendar(self):
        calendar = QCalendarWidget(self)
        calendar.setStyleSheet("background-color: rgba(0, 0, 0, 0); color: white; border: 1px solid white;")
        calendar.move(300, 300)
        calendar.show()
        self.startTimer(5000, lambda: calendar.close())

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = IOAssistant()
    sys.exit(app.exec_())
